angular.module("ngBabelfish",[]).run(["$rootScope","marvin","babelfishLang",function(n,a,e){n.$on(a.getRouteEvent(),function(n,a){e.init(a.name)})}]),angular.module("ngBabelfish").directive("i18nBind",["$rootScope","marvin","babelfish",function(n,a,e){return{scope:{translationKey:"=i18nBind",translationLang:"@i18nBindLang"},template:"{{translationKey}}",link:function(t,r,i){var o="",l=a.getNamespace();o=l?i.i18nBind.replace(l+".",""):i.i18nBind,i.i18nBindLang&&n.$on("ngBabelfish.lang:loaded",function(){if(e.isLangLoaded(i.i18nBindLang)){var n=e.get(i.i18nBindLang);r.text(n[o])}})}}}]),angular.module("ngBabelfish").directive("i18nLoad",["babelfishLang","marvinTasks",function(n,a){return{link:function(e,t,r){t.on("click",function(){e.$apply(function(){n.set(r.i18nLoad),a.bindToScope()})})}}}]),angular.module("ngBabelfish").factory("marvinMemory",function(){"use strict";var n={state:{current:"",loaded:!1},lang:{previous:"en-EN",current:"en-EN"},data:null,available:[],active:!1};return{get:function(){return n}}}),angular.module("ngBabelfish").provider("marvin",function(){"use strict";var n={state:"home",lang:"en-EN",url:"/i18n/languages.json",routeEventName:"$stateChangeSuccess",namespace:"i18n",lazy:!1,lazyConfig:[],current:"",log:!0};this.init=function(a){angular.extend(n,a)},this.lang=function(a){if(!a.lang)throw new Error("[babelfishProvider@lang] You must set the key lang");if(!a.url)throw new Error("[babelfishProvider@lang] You must set the key url");return n.lazy=!0,n.urls.push(a),this},this.$get=["$document",function(a){return{getConfig:function(){return n},getRouteEvent:function(){return n.routeEventName},getNamespace:function(){return n.namespace},getDefaultLang:function(){return n.lang?(a.documentElement.lang=n.lang.split("-")[0],n.lang):a.documentElement.lang+"-"+a.documentElement.lang.toUpperCase()},getLazyLangAvailable:function(){return n.lazyConfig.map(function(n){return n.lang})},getLazyConfig:function(a){var e=a||this.getDefaultLang();return n.urls.filter(function(n){return n.lang===e})[0]||{}},getLazyConfigByUrl:function(a){return n.urls.filter(function(n){return n===a})[0]},isVerbose:function(){return n.log},isLazy:function(){return n.lazy},isSolo:function(){return console.log("[@todo] Need to implement solo mode"),!1}}}]}),angular.module("ngBabelfish").service("babelfish",["$rootScope","marvin","marvinMemory",function(n,a,e){"use strict";function t(n){var e=g.data[n||g.lang.current]||{},t={};return a.isSolo()?angular.extend({},g.data._common||{},e):(e[g.state.current]||(a.isVerbose()&&console.warn("[ngBabelfish-translator@get] No translation available for the page %s for the  lang %s",g.state.current,n||g.lang.current),e[g.state.current]={}),angular.extend(t,{},e._common),angular.extend(t,e[g.state.current]))}function r(n){var e=n||g.lang.current;return a.isSolo()?angular.extend({},g.data._common||{},g.data[e]||{}):g.data[e]}function i(){return g.data}function o(n){return!!g.data[n]}function l(){return g.lang.current}function u(){return g.active}function s(){return g.available.indexOf("_comon")>-1&&g.available.splice(g.available.indexOf("_comon"),1),g.available}var g=e.get();return n.$on("ngBabelfish.lang:loaded",function(){console.log("Lang is loaded")}),{get:t,all:r,current:l,translations:i,languages:s,isLangLoaded:o,isLoaded:u}}]),angular.module("ngBabelfish").service("babelfishLang",["$http","$rootScope","marvin","marvinMemory","marvinTasks",function(n,a,e,t,r){"use strict";function i(n){s.state.current=n,l().then(r.bindToScope)}function o(n){s.lang.previous=angular.copy(s.lang.current),s.lang.current=n,a.$emit("ngBabelfish.lang:setLanguage",s.current)}function l(a){s.lang.current;return a=a||e.getConfig().url,e.isLazy()&&(a=e.getLazyConfig(s.current||e.getConfig().lang)),n.get(a).error(function(){if(e.isVerbose())throw new Error("[babelfishLangr@load] Cannot load the translation file")}).success(u)}function u(n){var t=s.lang.current;e.isLazy()?(s.data[t]=n,-1===s.available.indexOf(t)&&s.available.push(t)):(s.data=n,s.available=Object.keys(n)),a.$emit("ngBabelfish.lang:loaded",{lang:t})}var s=t.get();a.$on("ngBabelfish.marvin:requestTranslation",function(n,a){i(a)}),this.init=i,this.load=l,this.translate=u,this.set=o}]),angular.module("ngBabelfish").service("marvinTasks",["$rootScope","marvin","marvinMemory",function(n,a,e){"use strict";function t(){var e=i.lang.current;return a.isLazy()&&!i.data[e]?n.$emit("ngBabelfish.marvin:requestTranslation",{state:i.state.current,url:a.getLazyConfig(e).url}):void r()}function r(){var e,t=i.lang.current,r=i.state.current,o={};(r!==i.state.previous||i.lang.current!==i.lang.previous)&&i.data[t]&&(e=i.data[t][r],e||(i.data[t][r]={},a.isVerbose()&&console.warn("[marvinTasks@setTranslation] No translation available for the page %s for the lang %s",r,t)),angular.extend(o,angular.extend({},i.data[t]._common),e),a.getNamespace()?n[a.getNamespace()]=o:(angular.extend(n,o),a.isVerbose()&&console.warn("[marvinTasks@setTranslation] It is better to Load i18n inside a namespace.")),n.$emit("ngBabelfish.translation:loaded",{currentState:r,lang:t}))}var i=e.get();this.bindToScope=t}]);